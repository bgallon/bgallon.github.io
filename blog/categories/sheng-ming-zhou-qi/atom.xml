<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 生命周期 | Just Do IT.]]></title>
  <link href="http://bgallon.github.io/blog/categories/sheng-ming-zhou-qi/atom.xml" rel="self"/>
  <link href="http://bgallon.github.io/"/>
  <updated>2016-09-15T23:29:17+08:00</updated>
  <id>http://bgallon.github.io/</id>
  <author>
    <name><![CDATA[fishpan(fishpan_oliver@sina.com)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Activity生命周期（三）]]></title>
    <link href="http://bgallon.github.io/blog/2016/08/02/activitysheng-ming-zhou-qi-(san-)/"/>
    <updated>2016-08-02T10:19:00+08:00</updated>
    <id>http://bgallon.github.io/blog/2016/08/02/activitysheng-ming-zhou-qi-(san-)</id>
    <content type="html"><![CDATA[<p>上篇写到默认情况下系统会自动存储Activity的状态，也许你看到会马上实践一下，但是可能并没有得到预期的效果。</p>

<!--more-->


<h4>自动存储恢复状态-正确的姿势</h4>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span><span class="ni">&amp;lt;</span>?xml version=<span class="ni">&amp;ldquo;</span>1.0<span class="ni">&amp;rdquo;</span> encoding=<span class="ni">&amp;ldquo;</span>utf-8<span class="ni">&amp;rdquo;</span>?&gt;
</span><span class='line'><span class="nt">&lt;RelativeLayout</span> <span class="na">xmlns:android=</span><span class="s">&quot;http://schemas.android.com/apk/res/android&quot;</span>
</span><span class='line'>    <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>    <span class="na">android:layout_height=</span><span class="s">&quot;match_parent&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;EditText</span>
</span><span class='line'>        <span class="na">android:layout_width=</span><span class="s">&quot;match_parent&quot;</span>
</span><span class='line'>        <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class='line'>        <span class="na">android:id=</span><span class="s">&quot;@+id/main_edit&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/RelativeLayout&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>OK,这样系统就可以保存EditText的状态啦</p>

<p><strong><em>注意：</em></strong>
必须设置id，系统才会帮我们保存控件的状态，否则不会有任何效果</p>

<h4>系统保存Activity的过程</h4>

<p>首先我们来看下Activity中的onSaveInstanceStat方法：</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onSaveInstanceState</span><span class="o">(</span><span class="n">Bundle</span> <span class="n">outState</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">outState</span><span class="o">.</span><span class="na">putBundle</span><span class="o">(</span><span class="n">WINDOW_HIERARCHY_TAG</span><span class="o">,</span> <span class="n">mWindow</span><span class="o">.</span><span class="na">saveHierarchyState</span><span class="o">());</span>
</span><span class='line'>    <span class="n">Parcelable</span> <span class="n">p</span> <span class="o">=</span> <span class="n">mFragments</span><span class="o">.</span><span class="na">saveAllState</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">p</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">outState</span><span class="o">.</span><span class="na">putParcelable</span><span class="o">(</span><span class="n">FRAGMENTS_TAG</span><span class="o">,</span> <span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">getApplication</span><span class="o">().</span><span class="na">dispatchActivitySaveInstanceState</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">outState</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>其中方法中的第一句，调用了Window中的saveHierarchyState方法，我们知道Window是一个抽象类，那我们来看下Window的子类PhoneWindow中的saveHierarchyState的方法：</p>

<pre><code class="java">public Bundle saveHierarchyState() {
    ...此处省略几句代码
    SparseArray&lt;Parcelable&gt; states = new SparseArray&lt;Parcelable&gt;();
    mContentParent.saveHierarchyState(states);
    outState.putSparseParcelableArray(VIEWS_TAG, states);
    ...此处省略几句代码
}
</code></pre>

<p>我们看重点，其它代码就不贴了，可以看到，调用mContentParent的saveHierarchyState,mContentView是一个ViewGroup，ViewGroup中没有这个方法，我看下父类View</p>

<pre><code class="java">    public void saveHierarchyState(SparseArray&lt;Parcelable&gt; container) {
        dispatchSaveInstanceState(container);
    }
</code></pre>

<p>直接调用了dispatchSaveInstanceState方法，注意这时我们应该看ViewGroup中dispatchSaveInstanceState方法</p>

<pre><code class="java">    protected void dispatchSaveInstanceState(SparseArray&lt;Parcelable&gt; container) {
        super.dispatchSaveInstanceState(container);
        final int count = mChildrenCount;
        final View[] children = mChildren;
        for (int i = 0; i &lt; count; i++) {
            View c = children[i];
            if ((c.mViewFlags &amp; PARENT_SAVE_DISABLED_MASK) != PARENT_SAVE_DISABLED) {
                c.dispatchSaveInstanceState(container);
            }
        }
    }
</code></pre>

<p>大致做了两件事情，第一个调用本身的dispatchSaveInstanceState，遍历子View并调用子View的dispatchSaveInstanceState方法；</p>

<pre><code class="java">    protected void dispatchSaveInstanceState(SparseArray&lt;Parcelable&gt; container) {
        if (mID != NO_ID &amp;&amp; (mViewFlags &amp; SAVE_DISABLED_MASK) == 0) {
            mPrivateFlags &amp;= ~PFLAG_SAVE_STATE_CALLED;
            Parcelable state = onSaveInstanceState();
            if ((mPrivateFlags &amp; PFLAG_SAVE_STATE_CALLED) == 0) {
                throw new IllegalStateException(
                        "Derived class did not call super.onSaveInstanceState()");
            }
            if (state != null) {
                // Log.i("View", "Freezing #" + Integer.toHexString(mID)
                // + ": " + state);
                container.put(mID, state);
            }
        }
    }
</code></pre>

<p>OK，重点来了，我们发现当id为空时，不会保存View的状态；整个保存状态分析就算完了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Activity生命周期（二）]]></title>
    <link href="http://bgallon.github.io/blog/2016/08/01/activitysheng-ming-zhou-qi-(er-)/"/>
    <updated>2016-08-01T22:10:35+08:00</updated>
    <id>http://bgallon.github.io/blog/2016/08/01/activitysheng-ming-zhou-qi-(er-)</id>
    <content type="html"><![CDATA[<p>这篇文章主要介绍下，异常情况Activity的生命周期，在这里说明这里的异常情况不是我们程序崩溃，而是指当系统配置发生变化或者内存不足时的情况。</p>

<!--more-->


<h4>一、系统内存不足</h4>

<p>先介绍一下Activity的优先级，如下:</p>

<ul>
<li>前台Activity，可以与用户进行交互，优先级最高</li>
<li>可见但不能进行交互的Activity，例如弹框中的Activity</li>
<li>后台Activity，不可见，优先级最低</li>
</ul>


<p>当系统的内存比较紧张时，会按照这个优先级来回收销毁Activity，在销毁Activity时，会调用onSaveInstance方法，保存当前Activity的状态</p>

<h4>二、系统配置发生变化</h4>

<p>当应用启动时，系统会根据系统的配置加载资源，当系统配置发生变化时，默认情况下，Activity会被销毁并重新创建，当然我们也可以阻止其销毁。当系统配置发生变化后，Activity会执行方法onPause、onStop、onDestory方法；</p>

<h4>三、阻止系统配置变化引起的销毁重建</h4>

<p>系统的配置有很多内容，当系统某项配置发生变化时我们不想Activity被销毁重建，我们可以在AndroidManifest.xml文件中设置Activity的configChanges属性，这样当此项配置发生变化时，就不会销毁重启了，而是调用Activity的onConfigurationChanged方法，举个🌰：</p>

<pre><code class="xml">
&lt;activity android:name=".DemoActivity" android:configChanges="orientation|screenSize|
keyboardHidden"/&gt;
</code></pre>

<p>只要你不想某项配置的变化导致Activity的销毁重启，你就可以配置进去，多个可以使用"|&ldquo;来增加</p>

<h4>三、数据的保存和恢复</h4>

<p>如果我们想在Activity异常销毁前存储一些数据怎么搞呢；别担心，在异常销毁时，会调用Activity的onSaveInstanceState方法，在此方法中我们可以保存当前Activity的状态等，当在启动调用onCreate方法时，注意onCreate方法有个Bundle参数，这个参数带有在onSaveInstanceState方法中保存的数据（具体是不是一个对象就不知道了，O(∩_∩)O哈哈~），这是我们就可以恢复数据了，除此之外系统还会调用onRestoreInstanceState方法</p>

<p><strong><em>注意：</em></strong>
当不是异常销毁重启时，并不会调用这个方法；在onCreate中使用参数恢复数据时，注意判断参数非空的情况，不是异常重启的情况，参数是为空的。</p>

<p><strong><em>调用时机：</em></strong>
onSaveInstanceState是在onStop之前，具体是在onPause之前还是在onPause之后，这个不确定；
onRestoreInstanceState方法是在onStart方法之后；</p>

<p><strong><em>系统恢复数据：</em></strong>
系统默认情况下，会帮我们保存Activity的状态，重启时恢复数据；在View中有和activity一样的方法onSaveInstanceState和onRestoreInstanceSate，具体保存那些数据可以看下其中的源码</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Activity生命周期（一）]]></title>
    <link href="http://bgallon.github.io/blog/2016/07/31/activitysheng-ming-zhou-qi/"/>
    <updated>2016-07-31T22:45:43+08:00</updated>
    <id>http://bgallon.github.io/blog/2016/07/31/activitysheng-ming-zhou-qi</id>
    <content type="html"><![CDATA[<p>经过两天的努力，搭建了Octopress,虽然有点老，但是感觉还不错，比起csdn这个超级方便，起码没有讨厌的广告，在我眼前晃来晃去，写起文章来，有种极客范；以前很少写文章，但是很多东西总是会慢慢忘记，就再此做个记录吧。开始今天的话题，Activity作为Android四大组件之一，是使用最为频繁的一种组件。下面主页解析一下Activity生命周期中的一些问题</p>

<!--more-->


<h4>一、生命周期方法</h4>

<p><img src="http://pic001.cnblogs.com/img/tea9/201008/2010080516521645.png" alt="Activity生命周期图" /><br>
<strong><em>onCreate：</em></strong>Activity生命周期中第一个方法，我们可以进行一些初始化工作，比如加载布局和数据等<br>
<strong><em>onStart：</em></strong>Activity已经可见了，但是还没有出现在前台，无法进行交互<br>
<strong><em>onResume:</em></strong>Activity出现在前台，用户可以与其进行交互<br>
<strong><em>onPause:</em></strong>Activity正在停止,在这个方法里主页不能进行耗时的处理，否则可能会影响新Activity的启动<br>
<strong><em>onStop:</em></strong>Activity即将停止<br>
<strong><em>onRestart:</em></strong>表示Activity正在重新启动，当当前Activity从不可见重新变为可见时调用。一般启动新的Activity又回来，会调动，或者按home键到桌面，又回到此Activity时调用。<br>
<strong><em>onDestroy:</em></strong>Activity正在销毁，一般点击返回键时触发<br></p>

<h4>二、Activity常见情形</h4>

<ul>
<li>第一次启动，onCreate->onStart->onResume</li>
<li>当启动新Activity或者点击Home回到桌面时，会继续调用onPause->onStop,但是当启动新的Activity是透明主题时，不会调用onStop方法</li>
<li>当用户回到Activity时，会继续调用onRestart->onStart->onResume</li>
<li>当用户点击返回键时，onPause->onStop->onDestory</li>
</ul>


<h4>三、特别说明</h4>

<ul>
<li>onPause和onResume,onStop和onStart是配对的，看起来onPause和onStop，onStart和onResume方法的含义是差不多的，其实这几个方法的描述重点不用，onPause和onResume是描述是否可以进行交互；而onStart和onStop来描述是否可见。</li>
<li>启动新的Activity时，onPause先进行调用，才会调用新的Activity的生命周期</li>
</ul>

]]></content>
  </entry>
  
</feed>
