<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 插件化 | Just Do IT.]]></title>
  <link href="http://bgallon.github.io/blog/categories/cha-jian-hua/atom.xml" rel="self"/>
  <link href="http://bgallon.github.io/"/>
  <updated>2016-09-06T23:19:22+08:00</updated>
  <id>http://bgallon.github.io/</id>
  <author>
    <name><![CDATA[fishpan(fishpan_oliver@sina.com)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[访问插件中的资源]]></title>
    <link href="http://bgallon.github.io/blog/2016/09/06/fang-wen-cha-jian-zhong-de-zi-yuan/"/>
    <updated>2016-09-06T22:26:13+08:00</updated>
    <id>http://bgallon.github.io/blog/2016/09/06/fang-wen-cha-jian-zhong-de-zi-yuan</id>
    <content type="html"><![CDATA[<p>我们已经知道了如何加载插件的类文件，能够利用ClassLoader创建实例执行方法，但是在Android中如何访问插件中的资源呢？</p>

<!--more-->


<p>插件可以分成两类，一是插件已经是一个安装的apk,这里获取资源较为方便，我们可以使用createPackageContext方法获取上下文，既然获取了上下文，我们就可以获取资源。二是插件未进行安装，这个有点麻烦，如何获取未安装apk中的资源文件呢?往下看。。</p>

<h4>已安装的插件</h4>

<pre><code class="java">    try {
            PackageInfo packInfo = getPackageManager().getPackageInfo("com.fishpan.plugin", 0);
            String sourceDir = packInfo.applicationInfo.sourceDir;
            PathClassLoader clzzLoader = new PathClassLoader(sourceDir, getClassLoader());
            Class&lt;?&gt; clazz = Class.forName(packInfo.packageName + ".R$color", true, clzzLoader);
            Field field = clazz.getDeclaredField("main_color");
            int resourceId = field.getInt(R.color.class);
            Context plugnContext = this.createPackageContext(packInfo.packageName, CONTEXT_IGNORE_SECURITY | CONTEXT_INCLUDE_CODE);
            Log.d("fishpan_log", "path resource: " + resourceId);
            int color = plugnContext.getResources().getColor(resourceId);
            Log.d("fishpan_log", "path color: " + color);
            mPathTxtView.setBackgroundColor(color);
        } catch (Exception e) {
            Toast.makeText(this, e.getMessage(), Toast.LENGTH_SHORT).show();
            e.printStackTrace();
        }
</code></pre>

<p>首先通过classloader获取到要去到资源的id，然后通过createPackageContext方法获取到上下文，这样我们就可以获取到资源啦。是不是很简单</p>

<h4>未安装的插件</h4>

<p>未安装的插件我们无法获取到它的上下文，所以不能通过此种方式不能获取到resource，但是我们可以观察一下resource是怎么创建的，我们能不能自己创建resource呢?答案当然是可以，但是Google不推荐我们这样做，因此我们无法从通过正常途径来创建。我们通过分析源码发现，activity中getResources()方式实际上是ContentThemeWrapper中的一个方法，ContentThemeWrapper又调用来父类ContentWrapper的getResources方法，ContentWrapper中又调用了mBase.getResources()方法，我们知道mBase其实就是ContextImpl我们直接进去找,ContextImpl直接返回了mResources属性，我们可以看到它被赋值的地方，其中调用了mResourcesManager.getTopLevelResources这句话，跟进看看</p>

<p><img src="http://i4.buimg.com/567571/eb2ac45c3e89f978.jpg" alt="" /></p>

<p>貌似是用addAssetPath加载资源文件的。我们也可以调用这个方法啊，<strong><em>重点来了</em></strong></p>

<pre><code class="java">try {
            AssetManager assetManager = AssetManager.class.newInstance();
            Method addAssetPath = assetManager.getClass().getMethod("addAssetPath", String.class);//反射调用方法addAssetPath(String path)
            addAssetPath.invoke(assetManager, apkPath);//将未安装的Apk文件的添加进AssetManager中，第二个参数为apk文件的路径带apk名
            Resources superRes = this.getResources();
            Resources mResources = new Resources(assetManager, superRes.getDisplayMetrics(), superRes.getConfiguration());
            return mResources;
        } catch (Exception e) {
            e.printStackTrace();
        }
</code></pre>

<p>你可以接着继续玩耍啦。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[类加载器基础]]></title>
    <link href="http://bgallon.github.io/blog/2016/09/04/lei-jia-zai-qi-ji-chu/"/>
    <updated>2016-09-04T15:24:23+08:00</updated>
    <id>http://bgallon.github.io/blog/2016/09/04/lei-jia-zai-qi-ji-chu</id>
    <content type="html"><![CDATA[<p>Java中有一个加载器是ClassLoader，但是Java中的加载器不能直接应用在Android上边；对于Android上的应用，虽然都是用Java开发，并且使用了标准的Java编译器编译出来的Class文件，但是最终的Apk文件却包含的是dex类型的文件，dex文件是将所需的所有Class文件重新打包；由于dex文件是一种优化过的class文件，所以并不能直接用ClassLoader加载, <a href="https://medium.com/@HeadFirstDroid/how-apps-are-built-and-run-on-the-android-runtime-art-c027f73edb09#.ul2b6736x">class到apk的过程</a>，使用ClassLoader会出现什么问题可以看下这篇文章<a href="http://blog.csdn.net/jiangwei0910410003/article/details/17679823"> Android中的动态加载机制</a>,为了在Android中能够动态加载，Android提供了两个DexClassLoader及PathClassLoader。</p>

<!--more-->


<h4>插件类</h4>

<pre><code class="java 插件类">public class Plugin {
    public String print(){
        Log.d("fishpan_log", "-----print-----");
        return "OK";
    }
}
</code></pre>

<p>接下来我们需要把插件类打包，并插件apk放到sdcard上。</p>

<h4>DexClassLoader</h4>

<pre><code class="java">private void dexClassLoader(){
        String sourceDir = "/sdcard/plugin-debug.apk";
        DexClassLoader clzzLoader = new DexClassLoader(sourceDir, getApplicationInfo().dataDir, null, getClassLoader());
        try {
            Class&lt;?&gt; clazz = clzzLoader.loadClass("com.fishpan.plugin.Plugin");
            Object object = clazz.newInstance();
            Method method = clazz.getMethod("print");
            Object result = method.invoke(object);
            Toast.makeText(this, "result:" + result, Toast.LENGTH_SHORT).show();
        } catch (Exception e) {
            Toast.makeText(this, e.getMessage(), Toast.LENGTH_SHORT).show();
            e.printStackTrace();
        }
    }
</code></pre>

<p>因为在宿主apk中，是没有Plugin类，所以我们在宿主程序中不能直接使用，只能使用反射来进行。DexClassLoader构造参数有四个参数，第一个是dex或者apk文件地址；第二个是解压后dex文件的地址，这里我们使用宿主的dataDir;第三个是so文件路径，可以为空；第四个是父类加载器</p>

<h4>PathClassLoader</h4>

<pre><code class="java">private void pathClassLoader(){
        String sourceDir = "";
        try {
            PackageInfo packInfo = getPackageManager().getPackageInfo("com.fishpan.plugin", 0);
            sourceDir = packInfo.applicationInfo.sourceDir;
//            sourceDir = "/sdcard/plugin-debug.apk";   在安装的情况下,使用这种地址也是可以成功找到Class的
            PathClassLoader clzzLoader = new PathClassLoader(sourceDir, getClassLoader());
            Class&lt;?&gt; clazz = clzzLoader.loadClass("com.fishpan.plugin.Plugin");
            Object object = clazz.newInstance();
            Method method = clazz.getMethod("print");
            Object result = method.invoke(object);
            Toast.makeText(this, "result:" + result, Toast.LENGTH_SHORT).show();
        } catch (Exception e) {
            Toast.makeText(this, e.getMessage(), Toast.LENGTH_SHORT).show();
            e.printStackTrace();
        }
    }
</code></pre>

<p>PathClassLoader和DexClassLoader的区别就是据说只能加载已经安装在Android系统内APK文件，但是我也做了实验，安装的情况下，apk文件的路径自己指定也能加载到Class，在实际使用过程中，还是使用DexClassLoader比较靠谱，</p>

<p>运行情况如下</p>

<p><img src="http://i2.buimg.com/567571/7d89c35fce163706.gif" alt="" /></p>

<p>另外这里使用插件类，都是使用反射完成的，我们可以定义一个公共的接口，这样在插件apk和宿主apk里放入接口，这样就不用使用反射了，用起来就比较简单和容易了。</p>
]]></content>
  </entry>
  
</feed>
