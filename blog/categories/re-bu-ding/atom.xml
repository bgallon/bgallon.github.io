<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 热补丁 | Just Do IT.]]></title>
  <link href="http://bgallon.github.io/blog/categories/re-bu-ding/atom.xml" rel="self"/>
  <link href="http://bgallon.github.io/"/>
  <updated>2016-09-17T08:02:48+08:00</updated>
  <id>http://bgallon.github.io/</id>
  <author>
    <name><![CDATA[fishpan(fishpan_oliver@sina.com)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[APP热补丁动态修复技术]]></title>
    <link href="http://bgallon.github.io/blog/2016/09/10/appre-bu-ding-dong-tai-xiu-fu-ji-zhu/"/>
    <updated>2016-09-10T20:15:59+08:00</updated>
    <id>http://bgallon.github.io/blog/2016/09/10/appre-bu-ding-dong-tai-xiu-fu-ji-zhu</id>
    <content type="html"><![CDATA[<p>正常情况下，如果一个APP发布出去之后，突然发下有一个致命性bug机型修复，这个时候就有点尴尬了，发不出的包就像泼出去的水，再也收不回来了，我们只能发布一个紧急版本，重新打包，向各个应用市场提交新包审核之类的，相当麻烦。也会因此损失一部分用户。那今天来研究下如何避免这个问题的出现。</p>

<!-- more -->


<p>下看下ClassLoader是如何加载的，我们前面说到了加载使用的PathClassLoader及DexClassLoader，它们有一个共同的父类BaseDexClassLoader,BaseDexClassLoader的父类是ClassLoader，我们调用的LoaderClass方法实际上是ClassLoader中的方法</p>

<p><img src="http://i4.buimg.com/567571/afaf1e69c5e64ac7.jpg" alt="" /></p>

<p>重点是红色框框中的findClass，它在BaseDexClassLoader被覆盖了，看下BaseDexClassLoader中的findClass方法：</p>

<p><img src="http://i4.buimg.com/567571/cbe05a1a379584e2.jpg" alt="" /></p>

<p>我们再跟进PathList中看看</p>

<p><img src="http://i4.buimg.com/567571/1204c8d69b02a607.jpg" alt="" /></p>

<p>就是遍历dexElements找到目标类，找到就返回，这个正是我们想要，我们可以通过反射把修复过好的dex文件插入到dexEelements最前面，这样我们就可以达到覆盖有文件的原来有问题的dex文件，一次来达到修复bug的目的，O(∩_∩)O哈哈哈~</p>

<p><img src="http://i4.buimg.com/567571/8d91e4631369c71f.jpg" alt="" /></p>

<p>还有一个问题要处理，那就是CLASS_ISPREVERIFIED的问题（<strong><em>亲测，这个问题在4.0系统出现，6.0系统没有发现，和Android的虚拟机有关系？待进一步研究！！</em></strong>），具体产生的原因和解决的过程可以看下<a href="http://blog.csdn.net/lmj623565791/article/details/49883661"> Android 热补丁动态修复框架小结 </a>以及<a href="https://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400118620&amp;idx=1&amp;sn=b4fdd5055731290eef12ad0d17f39d4a">安卓App热补丁动态修复技术介绍</a></p>

<p>总结一下:类中的static方法，private方法，构造方法中直接引用到的类和clazz都在同一个dex中的话，这个类就会被打上CLASS_ISPREVERIFIED,那为了阻止类打上CLASS_ISPREVERIFIED，就在构造法方法中引用别的dex文件。</p>

<h3>几个开源的热修复框架：</h3>

<p><a href="https://github.com/dodola/HotFix">https://github.com/dodola/HotFix</a></p>

<p><a href="https://github.com/jasonross/Nuwa">https://github.com/jasonross/Nuwa</a></p>

<p><a href="https://github.com/bunnyblue/DroidFix">https://github.com/bunnyblue/DroidFix</a></p>

<p>这几个框架原理都是基于腾讯空间的热修复方案，还有其它的一些修复方案。</p>

<p><a href="http://blog.csdn.net/u010386612/article/details/50885320">重点推荐这位同学的几个篇博客值得一看，很有收获</a></p>
]]></content>
  </entry>
  
</feed>
