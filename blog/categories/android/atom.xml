<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Just Do IT.]]></title>
  <link href="http://bgallon.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://bgallon.github.io/"/>
  <updated>2016-09-20T23:17:54+08:00</updated>
  <id>http://bgallon.github.io/</id>
  <author>
    <name><![CDATA[fishpan(fishpan_oliver@sina.com)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Studio检测内存泄漏]]></title>
    <link href="http://bgallon.github.io/blog/2016/09/20/android-studiojian-ce-nei-cun-xie-lou/"/>
    <updated>2016-09-20T22:40:03+08:00</updated>
    <id>http://bgallon.github.io/blog/2016/09/20/android-studiojian-ce-nei-cun-xie-lou</id>
    <content type="html"><![CDATA[<p>首先先说明下，Java中也是会出现内存泄漏的，有的同学说Java怎么会出现内存泄漏呢，Java不是有垃圾回收机制吗?这个不是C++同学应该考虑的事情嘛？对！没错，Java也会出现内存泄漏，而出现的原因是无效的引用，导致本来需要被垃圾回收器回收的对象没有被回收掉，后期或具体说到那些原因会导致内存泄漏，今天先说说怎么检测内存泄漏。</p>

<!--more-->


<p>Android Studio这个工具就是好，可能你刚刚使用的时候觉得，又慢又耗内存，电脑卡的不要不要的，但是确实比较好用，用一段时间果然是离不开了，有多好就自行Google或者百度吧。今天讲讲如何利用Android studio来检测内存泄漏。</p>

<p>首先我们建立一个demo项目，很简单点击MainActivity中的按钮，跳转到SecondActivity中，再返回过来，代码如下：</p>

<pre><code class="java MainActivity.java">    public class MainActivity extends AppCompatActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }


    public void onClick(View view){
        Intent intent = new Intent(this, SecondActivity.class);
        startActivity(intent);
    }
}
</code></pre>

<pre><code class="java SecondActivity.java">    public class SecondActivity extends AppCompatActivity {
    private static Activity mActivity;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_second);
        mActivity = this;
    }
}
</code></pre>

<p>先看看庐山真面目，这就是今天的主角</p>

<p><img src="http://i2.buimg.com/567571/7d713a8e39ff9223.jpg" alt="" /></p>

<p>通过观察Memory可以看到应用内存使用情况，通过<img src="http://i2.buimg.com/567571/e7f172a6469945df.jpg" alt="" />来出发一次GC，通过点击<img src="http://i2.buimg.com/567571/9f957490ef5f5665.jpg" alt="" />稍等片刻之后，就可以进入HPROF Viewer界面，这个界面是重点，通过这个界面才能看出内存泄漏的情况，前面那些都是准备。</p>

<p><img src="http://i2.buimg.com/567571/b3e1417d99e56062.jpg" alt="" /></p>

<p>打开文件第一步，就是点击Analyzer Tasks中的绿色三角形来执行以下，可能在打开的时候Analyzer Tasks窗口是缩放的可以展开。点击三角形一段时间后，Analysis Results窗口， 重点是Leaked Activities这个是泄漏的Activity，双击其中的条目，可以在Reference Trees窗口中查看到，相关的引用情况，这就是泄漏的地方啦。</p>

<p><strong><em>不要点击class Name窗口中的类，否则没办法找到Reference Tree等信息，具体为啥我也不知道，待研究</em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[计算BitMap占用内存的大小]]></title>
    <link href="http://bgallon.github.io/blog/2016/09/20/ji-suan-bitmapde-da-xiao/"/>
    <updated>2016-09-20T22:00:22+08:00</updated>
    <id>http://bgallon.github.io/blog/2016/09/20/ji-suan-bitmapde-da-xiao</id>
    <content type="html"><![CDATA[<p>Bitmap占用内存的大小不仅和它的长宽色彩格式有关，还和设备的屏幕密度，所在的drawable文件夹有关。我们以小米4手机（屏幕密度480），一张150*46的放在drawable-hdpi的图片为例，看下它用多大的内存。</p>

<!--more-->


<pre><code class="java">    int byteCount = BitmapFactory.decodeResource(getResources(),R.drawable.logo_bigger).getByteCount();
    Log.d("MainActivity", "byteCount:" + byteCount);
</code></pre>

<p>运行结果如下：</p>

<pre><code class="java">    D/MainActivity: byteCount:110400
</code></pre>

<p>我们来手动算一下，图片长150宽46,采用ARGB8888的格式，所占内存=150 * 46 * 4 = 27600，应该是这个值啊，为啥结果是110400呢？难道是算错了？等等，前面说了占用内存的大小和当前设备的密度及所在的drawable文件夹有关系。图片所在资源文件夹和设备的屏幕密度这两个参数分别对应着BitmapFactory中的inDensity和inTargetDensity。比如我们的图片在drawable-xhdpi文件夹下，那么inDensity值就为240；设备的屏幕密度为480dpi，因而inTargetDensity的值就为240。把图片显示到一个设备上要根据各自的屏幕密度进行缩放，这个缩放系数即为inTargetDensity除以inDensity，所以算的时候应该是这样的：所占内存 = 150 * （480 / 240）* 46 * (480 / 240) * 4 = 110400刚刚和我们日志中打印的一直。</p>

<h4>结论</h4>

<p>图片放的文件夹和占用内存有重大关系，当所在文件夹的屏幕密度小于设备密度时，图片会进行放大，这是占用的内存会升高，当图片放置的文件夹屏幕密度比设备密度大时，图片占用内存变小</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[APP热补丁动态修复技术]]></title>
    <link href="http://bgallon.github.io/blog/2016/09/10/appre-bu-ding-dong-tai-xiu-fu-ji-zhu/"/>
    <updated>2016-09-10T20:15:59+08:00</updated>
    <id>http://bgallon.github.io/blog/2016/09/10/appre-bu-ding-dong-tai-xiu-fu-ji-zhu</id>
    <content type="html"><![CDATA[<p>正常情况下，如果一个APP发布出去之后，突然发下有一个致命性bug机型修复，这个时候就有点尴尬了，发不出的包就像泼出去的水，再也收不回来了，我们只能发布一个紧急版本，重新打包，向各个应用市场提交新包审核之类的，相当麻烦。也会因此损失一部分用户。那今天来研究下如何避免这个问题的出现。</p>

<!-- more -->


<p>下看下ClassLoader是如何加载的，我们前面说到了加载使用的PathClassLoader及DexClassLoader，它们有一个共同的父类BaseDexClassLoader,BaseDexClassLoader的父类是ClassLoader，我们调用的LoaderClass方法实际上是ClassLoader中的方法</p>

<p><img src="http://i4.buimg.com/567571/afaf1e69c5e64ac7.jpg" alt="" /></p>

<p>重点是红色框框中的findClass，它在BaseDexClassLoader被覆盖了，看下BaseDexClassLoader中的findClass方法：</p>

<p><img src="http://i4.buimg.com/567571/cbe05a1a379584e2.jpg" alt="" /></p>

<p>我们再跟进PathList中看看</p>

<p><img src="http://i4.buimg.com/567571/1204c8d69b02a607.jpg" alt="" /></p>

<p>就是遍历dexElements找到目标类，找到就返回，这个正是我们想要，我们可以通过反射把修复过好的dex文件插入到dexEelements最前面，这样我们就可以达到覆盖有文件的原来有问题的dex文件，一次来达到修复bug的目的，O(∩_∩)O哈哈哈~</p>

<p><img src="http://i4.buimg.com/567571/8d91e4631369c71f.jpg" alt="" /></p>

<p>还有一个问题要处理，那就是CLASS_ISPREVERIFIED的问题（<strong><em>亲测，这个问题在4.0系统出现，6.0系统没有发现，和Android的虚拟机有关系？待进一步研究！！</em></strong>），具体产生的原因和解决的过程可以看下<a href="http://blog.csdn.net/lmj623565791/article/details/49883661"> Android 热补丁动态修复框架小结 </a>以及<a href="https://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400118620&amp;idx=1&amp;sn=b4fdd5055731290eef12ad0d17f39d4a">安卓App热补丁动态修复技术介绍</a></p>

<p>总结一下:类中的static方法，private方法，构造方法中直接引用到的类和clazz都在同一个dex中的话，这个类就会被打上CLASS_ISPREVERIFIED,那为了阻止类打上CLASS_ISPREVERIFIED，就在构造法方法中引用别的dex文件。</p>

<h3>几个开源的热修复框架：</h3>

<p><a href="https://github.com/dodola/HotFix">https://github.com/dodola/HotFix</a></p>

<p><a href="https://github.com/jasonross/Nuwa">https://github.com/jasonross/Nuwa</a></p>

<p><a href="https://github.com/bunnyblue/DroidFix">https://github.com/bunnyblue/DroidFix</a></p>

<p>这几个框架原理都是基于腾讯空间的热修复方案，还有其它的一些修复方案。</p>

<p><a href="http://blog.csdn.net/u010386612/article/details/50885320">重点推荐这位同学的几个篇博客值得一看，很有收获</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[访问插件中的资源]]></title>
    <link href="http://bgallon.github.io/blog/2016/09/06/fang-wen-cha-jian-zhong-de-zi-yuan/"/>
    <updated>2016-09-06T22:26:13+08:00</updated>
    <id>http://bgallon.github.io/blog/2016/09/06/fang-wen-cha-jian-zhong-de-zi-yuan</id>
    <content type="html"><![CDATA[<p>我们已经知道了如何加载插件的类文件，能够利用ClassLoader创建实例执行方法，但是在Android中如何访问插件中的资源呢？</p>

<!--more-->


<p>插件可以分成两类，一是插件已经是一个安装的apk,这里获取资源较为方便，我们可以使用createPackageContext方法获取上下文，既然获取了上下文，我们就可以获取资源。二是插件未进行安装，这个有点麻烦，如何获取未安装apk中的资源文件呢?往下看。。</p>

<h4>已安装的插件</h4>

<pre><code class="java">    try {
            PackageInfo packInfo = getPackageManager().getPackageInfo("com.fishpan.plugin", 0);
            String sourceDir = packInfo.applicationInfo.sourceDir;
            PathClassLoader clzzLoader = new PathClassLoader(sourceDir, getClassLoader());
            Class&lt;?&gt; clazz = Class.forName(packInfo.packageName + ".R$color", true, clzzLoader);
            Field field = clazz.getDeclaredField("main_color");
            int resourceId = field.getInt(R.color.class);
            Context plugnContext = this.createPackageContext(packInfo.packageName, CONTEXT_IGNORE_SECURITY | CONTEXT_INCLUDE_CODE);
            Log.d("fishpan_log", "path resource: " + resourceId);
            int color = plugnContext.getResources().getColor(resourceId);
            Log.d("fishpan_log", "path color: " + color);
            mPathTxtView.setBackgroundColor(color);
        } catch (Exception e) {
            Toast.makeText(this, e.getMessage(), Toast.LENGTH_SHORT).show();
            e.printStackTrace();
        }
</code></pre>

<p>首先通过classloader获取到要去到资源的id，然后通过createPackageContext方法获取到上下文，这样我们就可以获取到资源啦。是不是很简单</p>

<h4>未安装的插件</h4>

<p>未安装的插件我们无法获取到它的上下文，所以不能通过此种方式不能获取到resource，但是我们可以观察一下resource是怎么创建的，我们能不能自己创建resource呢?答案当然是可以，但是Google不推荐我们这样做，因此我们无法从通过正常途径来创建。我们通过分析源码发现，activity中getResources()方式实际上是ContentThemeWrapper中的一个方法，ContentThemeWrapper又调用来父类ContentWrapper的getResources方法，ContentWrapper中又调用了mBase.getResources()方法，我们知道mBase其实就是ContextImpl我们直接进去找,ContextImpl直接返回了mResources属性，我们可以看到它被赋值的地方，其中调用了mResourcesManager.getTopLevelResources这句话，跟进看看</p>

<p><img src="http://i4.buimg.com/567571/eb2ac45c3e89f978.jpg" alt="" /></p>

<p>貌似是用addAssetPath加载资源文件的。我们也可以调用这个方法啊，<strong><em>重点来了</em></strong></p>

<pre><code class="java">try {
            AssetManager assetManager = AssetManager.class.newInstance();
            Method addAssetPath = assetManager.getClass().getMethod("addAssetPath", String.class);//反射调用方法addAssetPath(String path)
            addAssetPath.invoke(assetManager, apkPath);//将未安装的Apk文件的添加进AssetManager中，第二个参数为apk文件的路径带apk名
            Resources superRes = this.getResources();
            Resources mResources = new Resources(assetManager, superRes.getDisplayMetrics(), superRes.getConfiguration());
            return mResources;
        } catch (Exception e) {
            e.printStackTrace();
        }
</code></pre>

<p>你可以接着继续玩耍啦。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[类加载器基础]]></title>
    <link href="http://bgallon.github.io/blog/2016/09/04/lei-jia-zai-qi-ji-chu/"/>
    <updated>2016-09-04T15:24:23+08:00</updated>
    <id>http://bgallon.github.io/blog/2016/09/04/lei-jia-zai-qi-ji-chu</id>
    <content type="html"><![CDATA[<p>Java中有一个加载器是ClassLoader，但是Java中的加载器不能直接应用在Android上边；对于Android上的应用，虽然都是用Java开发，并且使用了标准的Java编译器编译出来的Class文件，但是最终的Apk文件却包含的是dex类型的文件，dex文件是将所需的所有Class文件重新打包；由于dex文件是一种优化过的class文件，所以并不能直接用ClassLoader加载, <a href="https://medium.com/@HeadFirstDroid/how-apps-are-built-and-run-on-the-android-runtime-art-c027f73edb09#.ul2b6736x">class到apk的过程</a>，使用ClassLoader会出现什么问题可以看下这篇文章<a href="http://blog.csdn.net/jiangwei0910410003/article/details/17679823"> Android中的动态加载机制</a>,为了在Android中能够动态加载，Android提供了两个DexClassLoader及PathClassLoader。</p>

<!--more-->


<h4>插件类</h4>

<pre><code class="java 插件类">public class Plugin {
    public String print(){
        Log.d("fishpan_log", "-----print-----");
        return "OK";
    }
}
</code></pre>

<p>接下来我们需要把插件类打包，并插件apk放到sdcard上。</p>

<h4>DexClassLoader</h4>

<pre><code class="java">private void dexClassLoader(){
        String sourceDir = "/sdcard/plugin-debug.apk";
        DexClassLoader clzzLoader = new DexClassLoader(sourceDir, getApplicationInfo().dataDir, null, getClassLoader());
        try {
            Class&lt;?&gt; clazz = clzzLoader.loadClass("com.fishpan.plugin.Plugin");
            Object object = clazz.newInstance();
            Method method = clazz.getMethod("print");
            Object result = method.invoke(object);
            Toast.makeText(this, "result:" + result, Toast.LENGTH_SHORT).show();
        } catch (Exception e) {
            Toast.makeText(this, e.getMessage(), Toast.LENGTH_SHORT).show();
            e.printStackTrace();
        }
    }
</code></pre>

<p>因为在宿主apk中，是没有Plugin类，所以我们在宿主程序中不能直接使用，只能使用反射来进行。DexClassLoader构造参数有四个参数，第一个是dex或者apk文件地址；第二个是解压后dex文件的地址，这里我们使用宿主的dataDir;第三个是so文件路径，可以为空；第四个是父类加载器</p>

<h4>PathClassLoader</h4>

<pre><code class="java">private void pathClassLoader(){
        String sourceDir = "";
        try {
            PackageInfo packInfo = getPackageManager().getPackageInfo("com.fishpan.plugin", 0);
            sourceDir = packInfo.applicationInfo.sourceDir;
//            sourceDir = "/sdcard/plugin-debug.apk";   在安装的情况下,使用这种地址也是可以成功找到Class的
            PathClassLoader clzzLoader = new PathClassLoader(sourceDir, getClassLoader());
            Class&lt;?&gt; clazz = clzzLoader.loadClass("com.fishpan.plugin.Plugin");
            Object object = clazz.newInstance();
            Method method = clazz.getMethod("print");
            Object result = method.invoke(object);
            Toast.makeText(this, "result:" + result, Toast.LENGTH_SHORT).show();
        } catch (Exception e) {
            Toast.makeText(this, e.getMessage(), Toast.LENGTH_SHORT).show();
            e.printStackTrace();
        }
    }
</code></pre>

<p>PathClassLoader和DexClassLoader的区别就是据说只能加载已经安装在Android系统内APK文件，但是我也做了实验，安装的情况下，apk文件的路径自己指定也能加载到Class，在实际使用过程中，还是使用DexClassLoader比较靠谱，</p>

<p>运行情况如下</p>

<p><img src="http://i2.buimg.com/567571/7d89c35fce163706.gif" alt="" /></p>

<p>另外这里使用插件类，都是使用反射完成的，我们可以定义一个公共的接口，这样在插件apk和宿主apk里放入接口，这样就不用使用反射了，用起来就比较简单和容易了。</p>
]]></content>
  </entry>
  
</feed>
