<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Just Do IT.]]></title>
  <link href="http://bgallon.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://bgallon.github.io/"/>
  <updated>2016-09-15T23:29:17+08:00</updated>
  <id>http://bgallon.github.io/</id>
  <author>
    <name><![CDATA[fishpan(fishpan_oliver@sina.com)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[APP热补丁动态修复技术]]></title>
    <link href="http://bgallon.github.io/blog/2016/09/10/appre-bu-ding-dong-tai-xiu-fu-ji-zhu/"/>
    <updated>2016-09-10T20:15:59+08:00</updated>
    <id>http://bgallon.github.io/blog/2016/09/10/appre-bu-ding-dong-tai-xiu-fu-ji-zhu</id>
    <content type="html"><![CDATA[<p>正常情况下，如果一个APP发布出去之后，突然发下有一个致命性bug机型修复，这个时候就有点尴尬了，发不出的包就像泼出去的水，再也收不回来了，我们只能发布一个紧急版本，重新打包，向各个应用市场提交新包审核之类的，相当麻烦。也会因此损失一部分用户。那今天来研究下如何避免这个问题的出现。</p>

<!-- more -->


<p>下看下ClassLoader是如何加载的，我们前面说到了加载使用的PathClassLoader及DexClassLoader，它们有一个共同的父类BaseDexClassLoader,BaseDexClassLoader的父类是ClassLoader，我们调用的LoaderClass方法实际上是ClassLoader中的方法</p>

<p><img src="http://i4.buimg.com/567571/afaf1e69c5e64ac7.jpg" alt="" /></p>

<p>重点是红色框框中的findClass，它在BaseDexClassLoader被覆盖了，看下BaseDexClassLoader中的findClass方法：</p>

<p><img src="http://i4.buimg.com/567571/cbe05a1a379584e2.jpg" alt="" /></p>

<p>我们再跟进PathList中看看</p>

<p><img src="http://i4.buimg.com/567571/1204c8d69b02a607.jpg" alt="" /></p>

<p>就是遍历dexElements找到目标类，找到就返回，这个正是我们想要，我们可以通过反射把修复过好的dex文件插入到dexEelements最前面，这样我们就可以达到覆盖有文件的原来有问题的dex文件，一次来达到修复bug的目的，O(∩_∩)O哈哈哈~</p>

<p><img src="http://i4.buimg.com/567571/8d91e4631369c71f.jpg" alt="" /></p>

<p>还有一个问题要处理，那就是CLASS_ISPREVERIFIED的问题（亲测，这个问题在4.0系统出现，6.0系统没有发现，和Android的虚拟机有关系？待进一步研究！！），具体产生的原因和解决的过程可以看下<a href="http://blog.csdn.net/lmj623565791/article/details/49883661"> Android 热补丁动态修复框架小结 </a>以及<a href="https://mp.weixin.qq.com/s?__biz=MzI1MTA1MzM2Nw==&amp;mid=400118620&amp;idx=1&amp;sn=b4fdd5055731290eef12ad0d17f39d4a">安卓App热补丁动态修复技术介绍</a></p>

<p>总结一下:类中的static方法，private方法，构造方法中直接引用到的类和clazz都在同一个dex中的话，这个类就会被打上CLASS_ISPREVERIFIED,那为了阻止类打上CLASS_ISPREVERIFIED，就在构造法方法中引用别的dex文件。</p>

<h3>几个开源的热修复框架：</h3>

<p><a href="https://github.com/dodola/HotFix">https://github.com/dodola/HotFix</a></p>

<p><a href="https://github.com/jasonross/Nuwa">https://github.com/jasonross/Nuwa</a></p>

<p><a href="https://github.com/bunnyblue/DroidFix">https://github.com/bunnyblue/DroidFix</a></p>

<p>这几个框架原理都是基于腾讯空间的热修复方案，还有其它的一些修复方案。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[访问插件中的资源]]></title>
    <link href="http://bgallon.github.io/blog/2016/09/06/fang-wen-cha-jian-zhong-de-zi-yuan/"/>
    <updated>2016-09-06T22:26:13+08:00</updated>
    <id>http://bgallon.github.io/blog/2016/09/06/fang-wen-cha-jian-zhong-de-zi-yuan</id>
    <content type="html"><![CDATA[<p>我们已经知道了如何加载插件的类文件，能够利用ClassLoader创建实例执行方法，但是在Android中如何访问插件中的资源呢？</p>

<!--more-->


<p>插件可以分成两类，一是插件已经是一个安装的apk,这里获取资源较为方便，我们可以使用createPackageContext方法获取上下文，既然获取了上下文，我们就可以获取资源。二是插件未进行安装，这个有点麻烦，如何获取未安装apk中的资源文件呢?往下看。。</p>

<h4>已安装的插件</h4>

<pre><code class="java">    try {
            PackageInfo packInfo = getPackageManager().getPackageInfo("com.fishpan.plugin", 0);
            String sourceDir = packInfo.applicationInfo.sourceDir;
            PathClassLoader clzzLoader = new PathClassLoader(sourceDir, getClassLoader());
            Class&lt;?&gt; clazz = Class.forName(packInfo.packageName + ".R$color", true, clzzLoader);
            Field field = clazz.getDeclaredField("main_color");
            int resourceId = field.getInt(R.color.class);
            Context plugnContext = this.createPackageContext(packInfo.packageName, CONTEXT_IGNORE_SECURITY | CONTEXT_INCLUDE_CODE);
            Log.d("fishpan_log", "path resource: " + resourceId);
            int color = plugnContext.getResources().getColor(resourceId);
            Log.d("fishpan_log", "path color: " + color);
            mPathTxtView.setBackgroundColor(color);
        } catch (Exception e) {
            Toast.makeText(this, e.getMessage(), Toast.LENGTH_SHORT).show();
            e.printStackTrace();
        }
</code></pre>

<p>首先通过classloader获取到要去到资源的id，然后通过createPackageContext方法获取到上下文，这样我们就可以获取到资源啦。是不是很简单</p>

<h4>未安装的插件</h4>

<p>未安装的插件我们无法获取到它的上下文，所以不能通过此种方式不能获取到resource，但是我们可以观察一下resource是怎么创建的，我们能不能自己创建resource呢?答案当然是可以，但是Google不推荐我们这样做，因此我们无法从通过正常途径来创建。我们通过分析源码发现，activity中getResources()方式实际上是ContentThemeWrapper中的一个方法，ContentThemeWrapper又调用来父类ContentWrapper的getResources方法，ContentWrapper中又调用了mBase.getResources()方法，我们知道mBase其实就是ContextImpl我们直接进去找,ContextImpl直接返回了mResources属性，我们可以看到它被赋值的地方，其中调用了mResourcesManager.getTopLevelResources这句话，跟进看看</p>

<p><img src="http://i4.buimg.com/567571/eb2ac45c3e89f978.jpg" alt="" /></p>

<p>貌似是用addAssetPath加载资源文件的。我们也可以调用这个方法啊，<strong><em>重点来了</em></strong></p>

<pre><code class="java">try {
            AssetManager assetManager = AssetManager.class.newInstance();
            Method addAssetPath = assetManager.getClass().getMethod("addAssetPath", String.class);//反射调用方法addAssetPath(String path)
            addAssetPath.invoke(assetManager, apkPath);//将未安装的Apk文件的添加进AssetManager中，第二个参数为apk文件的路径带apk名
            Resources superRes = this.getResources();
            Resources mResources = new Resources(assetManager, superRes.getDisplayMetrics(), superRes.getConfiguration());
            return mResources;
        } catch (Exception e) {
            e.printStackTrace();
        }
</code></pre>

<p>你可以接着继续玩耍啦。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[类加载器基础]]></title>
    <link href="http://bgallon.github.io/blog/2016/09/04/lei-jia-zai-qi-ji-chu/"/>
    <updated>2016-09-04T15:24:23+08:00</updated>
    <id>http://bgallon.github.io/blog/2016/09/04/lei-jia-zai-qi-ji-chu</id>
    <content type="html"><![CDATA[<p>Java中有一个加载器是ClassLoader，但是Java中的加载器不能直接应用在Android上边；对于Android上的应用，虽然都是用Java开发，并且使用了标准的Java编译器编译出来的Class文件，但是最终的Apk文件却包含的是dex类型的文件，dex文件是将所需的所有Class文件重新打包；由于dex文件是一种优化过的class文件，所以并不能直接用ClassLoader加载, <a href="https://medium.com/@HeadFirstDroid/how-apps-are-built-and-run-on-the-android-runtime-art-c027f73edb09#.ul2b6736x">class到apk的过程</a>，使用ClassLoader会出现什么问题可以看下这篇文章<a href="http://blog.csdn.net/jiangwei0910410003/article/details/17679823"> Android中的动态加载机制</a>,为了在Android中能够动态加载，Android提供了两个DexClassLoader及PathClassLoader。</p>

<!--more-->


<h4>插件类</h4>

<pre><code class="java 插件类">public class Plugin {
    public String print(){
        Log.d("fishpan_log", "-----print-----");
        return "OK";
    }
}
</code></pre>

<p>接下来我们需要把插件类打包，并插件apk放到sdcard上。</p>

<h4>DexClassLoader</h4>

<pre><code class="java">private void dexClassLoader(){
        String sourceDir = "/sdcard/plugin-debug.apk";
        DexClassLoader clzzLoader = new DexClassLoader(sourceDir, getApplicationInfo().dataDir, null, getClassLoader());
        try {
            Class&lt;?&gt; clazz = clzzLoader.loadClass("com.fishpan.plugin.Plugin");
            Object object = clazz.newInstance();
            Method method = clazz.getMethod("print");
            Object result = method.invoke(object);
            Toast.makeText(this, "result:" + result, Toast.LENGTH_SHORT).show();
        } catch (Exception e) {
            Toast.makeText(this, e.getMessage(), Toast.LENGTH_SHORT).show();
            e.printStackTrace();
        }
    }
</code></pre>

<p>因为在宿主apk中，是没有Plugin类，所以我们在宿主程序中不能直接使用，只能使用反射来进行。DexClassLoader构造参数有四个参数，第一个是dex或者apk文件地址；第二个是解压后dex文件的地址，这里我们使用宿主的dataDir;第三个是so文件路径，可以为空；第四个是父类加载器</p>

<h4>PathClassLoader</h4>

<pre><code class="java">private void pathClassLoader(){
        String sourceDir = "";
        try {
            PackageInfo packInfo = getPackageManager().getPackageInfo("com.fishpan.plugin", 0);
            sourceDir = packInfo.applicationInfo.sourceDir;
//            sourceDir = "/sdcard/plugin-debug.apk";   在安装的情况下,使用这种地址也是可以成功找到Class的
            PathClassLoader clzzLoader = new PathClassLoader(sourceDir, getClassLoader());
            Class&lt;?&gt; clazz = clzzLoader.loadClass("com.fishpan.plugin.Plugin");
            Object object = clazz.newInstance();
            Method method = clazz.getMethod("print");
            Object result = method.invoke(object);
            Toast.makeText(this, "result:" + result, Toast.LENGTH_SHORT).show();
        } catch (Exception e) {
            Toast.makeText(this, e.getMessage(), Toast.LENGTH_SHORT).show();
            e.printStackTrace();
        }
    }
</code></pre>

<p>PathClassLoader和DexClassLoader的区别就是据说只能加载已经安装在Android系统内APK文件，但是我也做了实验，安装的情况下，apk文件的路径自己指定也能加载到Class，在实际使用过程中，还是使用DexClassLoader比较靠谱，</p>

<p>运行情况如下</p>

<p><img src="http://i2.buimg.com/567571/7d89c35fce163706.gif" alt="" /></p>

<p>另外这里使用插件类，都是使用反射完成的，我们可以定义一个公共的接口，这样在插件apk和宿主apk里放入接口，这样就不用使用反射了，用起来就比较简单和容易了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[代理模式]]></title>
    <link href="http://bgallon.github.io/blog/2016/09/03/dai-li-mo-shi/"/>
    <updated>2016-09-03T14:59:28+08:00</updated>
    <id>http://bgallon.github.io/blog/2016/09/03/dai-li-mo-shi</id>
    <content type="html"><![CDATA[<p>所谓代理，就是一个人或者机构代表另一个人或者机构采取行动。在一些情况下，一个客户不想或者不能够直接引用一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</p>

<!--more-->


<p><img src="http://i1.piimg.com/567571/a74ac82fd02cddc9.gif" alt="" /></p>

<p>Subject:委托对象和代理对象的共同接口</p>

<p>RealSubject:委托对象</p>

<p>Proxy:代理对象</p>

<h4>代理实现分类：</h4>

<ul>
<li><p>静态代理</p>

<p>  代理类是在编译时就实现好了。</p></li>
<li><p>动态代理</p>

<p>  动态代理类的源码是在程序运行期间由JVM根据反射等机制动态的生成，所以不存在代理类的字节码文件。</p></li>
</ul>


<h4>静态代理</h4>

<pre><code class="java 公共接口">public interface Subject {
    public void request();
}
</code></pre>

<pre><code class="java 委托对象">
public class RealSubject implements Subject {

    @Override
    public void request() {
        System.out.println("request");
    }

}
</code></pre>

<pre><code class="java 代理对象">public class Proxy implements Subject{
    private Subject mSubject;

    public Proxy(Subject subject){
        mSubject = subject;
    }

    @Override
    public void request() {
        System.out.println("start request");
        if(null != mSubject){
            mSubject.request();
        }
        System.out.println("end request");
    }

}
</code></pre>

<p>静态代理类优缺点</p>

<p>优点：业务类只需要关注业务逻辑本身，保证了业务类的重用性。这是代理的共有优点。</p>

<p>缺点：</p>

<ul>
<li>代理对象的一个接口只服务于一种类型的对象，如果要代理的方法很多，势必要为每一种方法都进行代理，静态代理在程序规模稍大时就无法胜任了。</li>
<li>如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。</li>
</ul>


<h4>动态代理</h4>

<p>实现动态代理模式，首先我们需要创建一个调度器，只需实现InvocationHandler接口即可</p>

<pre><code class="java 调度器">public class SubjectHandler implements InvocationHandler{
    private Object delegate;

    public SubjectHandler(Object delegate) {
        this.delegate = delegate;
    }

    @Override
    public Object invoke(Object proxy, Method method, Object[] args)
            throws Throwable {
        System.out.println("start invoke");
        Object result = method.invoke(delegate, args);
        System.out.println("end invoke");
        return result; 
    }
}
</code></pre>

<pre><code class="java">Subject delegate = new RealSubject();
SubjectHandler handler = new SubjectHandler(delegate);
Subject proxy = (Subject)java.lang.reflect.Proxy.newProxyInstance(  
    delegate.getClass().getClassLoader(),   
    delegate.getClass().getInterfaces(),   
    handler);  
proxy.request();
</code></pre>

<p>优点：
动态代理与静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理（InvocationHandler.invoke）。这样，在接口方法数量比较多的时候，我们可以进行灵活处理，而不需要像静态代理那样每一个方法进行中转。在本示例中看不出来，因为invoke方法体内嵌入了具体的外围业务（记录任务处理前后时间并计算时间差），实际中可以类似Spring AOP那样配置外围业务。</p>

<p>缺点：
无法摆脱仅支持 interface 代理的桎梏，因为它的设计注定了这个遗憾。回想一下那些动态生成的代理类的继承关系图，它们已经注定有一个共同的父类叫 Proxy。Java 的继承机制注定了这些动态代理类们无法实现对 class 的动态代理，原因是多继承在 Java 中本质上就行不通。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IPC机制-Binder]]></title>
    <link href="http://bgallon.github.io/blog/2016/08/14/ipcji-zhi-binder/"/>
    <updated>2016-08-14T10:43:45+08:00</updated>
    <id>http://bgallon.github.io/blog/2016/08/14/ipcji-zhi-binder</id>
    <content type="html"><![CDATA[<p>Binder是进程间通讯的一种方式，Android开发中，Binder主要用于Service中，其中普通的service不涉及设计进程间通讯，我这里看下AIDL方式，看下整个的调用过程</p>

<!--more-->


<p>首先我们先创建aidl文件IDemoManager.aidl,<strong><em>注意</em></strong>在Android studio中使用aidl,需要单独放在一个文件夹下，名称为aidl,和java同目录，如图</p>

<p><img src="http://i1.piimg.com/567571/e946c4c0e24e3645.jpg" alt="" /></p>

<p>内容如下：</p>

<pre><code class="java">
package com.xxx.xxx;

interface IDemoManager {
    void add(int a, int b);
}
</code></pre>

<p>然后进行编译，如下图</p>

<p><img src="http://i1.piimg.com/567571/38daf5235fd2f2e9.jpg" alt="" /></p>

<p>可以在build中发现自动生成的代码，这就是aidl要做的事情，工具根据我们写的aidl文件，编程成代码，当然你也可以不写aidl文件，自己写代码</p>

<p><img src="http://i1.piimg.com/567571/2896af883b845c00.jpg" alt="" /></p>

<p>下面我就来研究一下为我们生成的代码，这个才是最关键</p>

<pre><code class="java">
    public interface IDemoManager extends android.os.IInterface {
    /**
     * Local-side IPC implementation stub class.
     */
    public static abstract class Stub extends android.os.Binder implements com.fishpan.appliactions.IDemoManager {
        private static final java.lang.String DESCRIPTOR = "com.fishpan.appliactions.IDemoManager";

        /**
         * Construct the stub at attach it to the interface.
         */
        public Stub() {
            this.attachInterface(this, DESCRIPTOR);
        }

        /**
         * Cast an IBinder object into an com.fishpan.appliactions.IDemoManager interface,
         * generating a proxy if needed.
         */
        public static com.fishpan.appliactions.IDemoManager asInterface(android.os.IBinder obj) {
            if ((obj == null)) {
                return null;
            }
            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
            if (((iin != null) &amp;&amp; (iin instanceof com.fishpan.appliactions.IDemoManager))) {
                return ((com.fishpan.appliactions.IDemoManager) iin);
            }
            return new com.fishpan.appliactions.IDemoManager.Stub.Proxy(obj);
        }

        @Override
        public android.os.IBinder asBinder() {
            return this;
        }

        @Override
        public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException {
            switch (code) {
                case INTERFACE_TRANSACTION: {
                    reply.writeString(DESCRIPTOR);
                    return true;
                }
                case TRANSACTION_add: {
                    data.enforceInterface(DESCRIPTOR);
                    int _arg0;
                    _arg0 = data.readInt();
                    int _arg1;
                    _arg1 = data.readInt();
                    int _result = this.add(_arg0, _arg1);
                    reply.writeNoException();
                    reply.writeInt(_result);
                    return true;
                }
            }
            return super.onTransact(code, data, reply, flags);
        }

        private static class Proxy implements com.fishpan.appliactions.IDemoManager {
            private android.os.IBinder mRemote;

            Proxy(android.os.IBinder remote) {
                mRemote = remote;
            }

            @Override
            public android.os.IBinder asBinder() {
                return mRemote;
            }

            public java.lang.String getInterfaceDescriptor() {
                return DESCRIPTOR;
            }

            @Override
            public int add(int a, int b) throws android.os.RemoteException {
                android.os.Parcel _data = android.os.Parcel.obtain();
                android.os.Parcel _reply = android.os.Parcel.obtain();
                int _result;
                try {
                    _data.writeInterfaceToken(DESCRIPTOR);
                    _data.writeInt(a);
                    _data.writeInt(b);
                    mRemote.transact(Stub.TRANSACTION_add, _data, _reply, 0);
                    _reply.readException();
                    _result = _reply.readInt();
                } finally {
                    _reply.recycle();
                    _data.recycle();
                }
                return _result;
            }
        }

        static final int TRANSACTION_add = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0);
    }

    public int add(int a, int b) throws android.os.RemoteException;
}
</code></pre>

<p>自动生成的代码有点乱，我们可以把它给格式化一下，可以看到编译工具为我们生成了一个接口IDemoManager,继承于IInterface，啥事也没干；一个add方法，一个静态的内部抽象类，继承与Binder，实现IDemoManager本身，我们来详细看看他的每一部分</p>

<ul>
<li>DESCRIPTOR Binder的唯一标识</li>
<li>asInterface 用于将服务端的Binder对象转换成客户端所需要的aidl接口类型的对象，注意我们可以根据代码看出，他有两个地方有return，第一个其实是当客户端和服务端属于同一个进程时，返回自己本身，第二个是返回了一个代理对象</li>
<li>asBinder 用于返回当前Binder对象</li>
<li>onTransact 这个方法运行在<strong><em>服务端</em></strong>，当客户端发起跨进程请求时，远程请求会通过系统底层封装后交有此方法。服务端通过code，确定客户端要执行什么方法，从data获取参数，然后指定目标方法；执行完毕后就像reply中写入返回值(如果有返回值)</li>
<li>Proxy#add 此方法运行在客户端，当客户端调用此方法时，会输入型参数write进<em>data，输出型参数write进</em>reply,紧接着会调用transact方法来发起RPC请求，当前线程挂起；服务端的onTransact方法被调用，调用结束后，返回数据会在_reply中。</li>
</ul>

]]></content>
  </entry>
  
</feed>
